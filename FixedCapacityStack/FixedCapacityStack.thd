#pragma once

#include <cstddef>

template<typename T, typename Allocator>
class FixedCapacityStack {
public:
    FixedCapacityStack() noexcept;

    ~FixedCapacityStack() noexcept;

    FixedCapacityStack(const std::size_t capacity, Allocator* allocatorPtr) noexcept;

    FixedCapacityStack(const FixedCapacityStack& other) = delete;

    FixedCapacityStack(FixedCapacityStack&& other) noexcept;

    FixedCapacityStack& operator=(const FixedCapacityStack& other) = delete;

    FixedCapacityStack& operator=(FixedCapacityStack&& other) noexcept = delete;

public:
    bool isEmpty() const noexcept;

    bool isFull() const noexcept;

    std::size_t capacity() const noexcept;

    std::size_t size() const noexcept;

    const T& top() const noexcept;

public:
    T& top() noexcept;

    T pop() noexcept;

    void push(const T& value) noexcept;

    void push(T&& value) noexcept;

    void release();

    bool safeRelease() noexcept;

private:
    void null() noexcept;

    void destructObjects() noexcept;

protected:
    std::size_t stackCapacity;

    std::size_t stackSize;

    Allocator* allocatorPtr;

    T* stackData;
};

#include "FixedCapacityStack.tci"