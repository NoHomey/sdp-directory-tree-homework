#include "DynamicArray.thd"
#include <cassert>
#include <utility>
#include <cstring>
#include <new>

template<typename T, typename Allocator>
inline DynamicArray<T, Allocator>::DynamicArray(Allocator* allocatorPtr) noexcept
: array{nullptr}, arraySize{0}, arrayCapacity{0}, allocatorPtr{allocatorPtr} { }

template<typename T, typename Allocator>
inline DynamicArray<T, Allocator>::DynamicArray(const std::size_t capacity, Allocator* allocatorPtr)
: DynamicArray{} {
    assert(capacity && allocatorPtr);
    setAllocator(allocatorPtr, capacity);
}

template<typename T, typename Allocator>
inline DynamicArray<T, Allocator>::~DynamicArray() noexcept {
    safeRelease();
}

template<typename T, typename Allocator>
inline DynamicArray<T, Allocator>::DynamicArray(DynamicArray&& other) noexcept
: array{other.array}, arraySize{other.arraySize}, arrayCapacity{other.arrayCapacity}, allocatorPtr{other.allocatorPtr} {
    other.null();
}

template<typename T, typename Allocator>
inline const T* DynamicArray<T, Allocator>::data() const noexcept {
    return array;
}

template<typename T, typename Allocator>
inline std::size_t DynamicArray<T, Allocator>::size() const noexcept {
    return arraySize;
}

template<typename T, typename Allocator>
inline std::size_t DynamicArray<T, Allocator>::capacity() const noexcept {
    return arrayCapacity;
}

template<typename T, typename Allocator>
inline const Allocator* DynamicArray<T, Allocator>::getAllocatorPtr() const noexcept {
    return allocatorPtr;
}

template<typename T, typename Allocator>
inline bool DynamicArray<T, Allocator>::isEmpty() const noexcept {
    return !arraySize;
}

template<typename T, typename Allocator>
inline const T& DynamicArray<T, Allocator>::operator[](const std::size_t index) const noexcept {
    return const_cast<DynamicArray<T, Allocator>* const>(this)->operator[](index);
}

template<typename T, typename Allocator>
inline T& DynamicArray<T, Allocator>::operator[](const std::size_t index) noexcept {
    assert(index < arraySize);
    return array[index];
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::push(const T& value) {
    ensureCapacity();
    new(array + arraySize) T{value};
    ++arraySize;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::push(T&& value) {
    ensureCapacity();
    new(array + arraySize) T{std::move(value)};
    ++arraySize;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::pop() noexcept {
    assert(!isEmpty());
    (array + arraySize - 1)->~T();
    --arraySize;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::empty() noexcept {
    arraySize = 0;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::removeAtIndex(const std::size_t index) noexcept {
    assert(index < arraySize);
    (array + index)->~T();
    if(index != (arraySize - 1)) {
        std::memcpy(array + index, array + arraySize - 1, sizeof(T));
    }
    --arraySize;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::setAllocator(Allocator* allocatorPtr, const std::size_t initialCapacity) {
    assert(!this->allocatorPtr);
    this->allocatorPtr = allocatorPtr;
    array = reinterpret_cast<T*>(allocatorPtr->allocate(sizeof(T) * initialCapacity));
    arrayCapacity = initialCapacity;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::release() {
    if(array) {
        destructObjects();
        allocatorPtr->release(array, sizeof(T) * arrayCapacity);
        null();
    }
}

template<typename T, typename Allocator>
inline bool DynamicArray<T, Allocator>::safeRelease() noexcept {
    if(array) {
        destructObjects();
        if(allocatorPtr->safeRelease(array, sizeof(T) * arrayCapacity)) {
            null();
            return true;
        }
        return false;
    }
    return true;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::null() noexcept {
    array = nullptr;
    arraySize = 0;
    arrayCapacity = 0;
    allocatorPtr = nullptr;
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::ensureCapacity() {
    assert(allocatorPtr);
    if(arraySize == arrayCapacity) {
        if(arrayCapacity) {
            const std::size_t reallocationSize = (arrayCapacity << 1) * sizeof(T);
            if(!allocatorPtr->reallocate(array, arrayCapacity * sizeof(T), reallocationSize)) {
                T* newArray = reinterpret_cast<T*>(allocatorPtr->allocate(reallocationSize));
                std::memcpy(newArray, array, arrayCapacity);
                allocatorPtr->release(array, arrayCapacity);
                array = newArray;
            }
            arrayCapacity <<= 1;
        } else {
            array = reinterpret_cast<T*>(allocatorPtr->allocate(defaultInitialCapacity));
            arrayCapacity = defaultInitialCapacity;
        }
    }
}

template<typename T, typename Allocator>
inline void DynamicArray<T, Allocator>::destructObjects() noexcept {
    for(std::size_t index = 0; index < arraySize; ++index) {
        (array + index)->~T();
    }
    arraySize = 0;
}