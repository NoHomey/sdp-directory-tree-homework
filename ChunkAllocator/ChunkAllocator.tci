#pragma once

#include "ChunkAllocator.thd"
#include <cassert>
#include <new>

inline ChunkAllocator::ChunkAllocator() noexcept
: ChunkAllocator{defaultChunkSize} { }

inline ChunkAllocator::~ChunkAllocator() noexcept {
    deleteAllAllocatedChunk();
    #ifndef NDEBUG
    null();
    #endif
}

inline ChunkAllocator::ChunkAllocator(const std::size_t chunkSize) noexcept
: first{nullptr}, last{nullptr}, nextChunkSize{chunkSize} {
    assert(chunkSize >= defaultChunkSize);
}

inline ChunkAllocator::ChunkAllocator(ChunkAllocator&& other) noexcept
: first{other.first}, last{other.last}, nextChunkSize{other.nextChunkSize} { }

inline ChunkAllocator& ChunkAllocator::operator=(ChunkAllocator&& other) noexcept {
    if(this != &other) {
        deleteAllAllocatedChunk();
        first = other.first;
        last = other.last;
        nextChunkSize = other.nextChunkSize;
        other.null();
    }
    return *this;
}

inline void* ChunkAllocator::allocate(const std::size_t bytes) {
    Chunk* bestFit = nullptr;
    std::size_t minLeft = -1;
    for(Chunk* iter = first; iter != last; iter = iter->next) {
        const std::size_t unused = iter->capacity - iter->used;
        if(unused == bytes) {
            bestFit = iter;
            break;
        }
        if(unused > bytes) {
            const std::size_t left = unused - bytes;
            if(left < minLeft) {
                minLeft = left;
                bestFit = iter;
            }
        }
    }
    if(!first || (!bestFit && ((last->capacity - last->used) < bytes))) {
        char* newChunk = new char[sizeof(Chunk) + nextChunkSize];
        new (newChunk) Chunk{nextChunkSize};
        bestFit = reinterpret_cast<Chunk*>(newChunk);
        last = first ? (last->next = bestFit) : (first = bestFit);
    }
    if(!bestFit) {
        bestFit = last;
    }
    void* ptr = reinterpret_cast<char*>(bestFit) + sizeof(Chunk) + bestFit->used;
    bestFit->used += bytes;
    return ptr;
}

inline void ChunkAllocator::deleteAllAllocatedChunk() noexcept {
    Chunk* chunk;
    while(first) {
        chunk = first;
        first = first->next;
        //chunk->~Chunk(); trivial default destructor
        delete[] reinterpret_cast<char*>(chunk);
    }
}

inline void ChunkAllocator::null() noexcept {
    first = last = nullptr;
}

